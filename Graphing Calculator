import numpy as np
import matplotlib.pyplot as plt
from sympy import symbols, Eq, solve

# Plot one or more functions
def plot_functions(functions, x_range=(-10, 10), num_points=1000, shade=None):
    x_vals = np.linspace(x_range[0], x_range[1], num_points)
    plt.figure(figsize=(8, 6))
    
    for func in functions:
        y_vals = func(x_vals)
        plt.plot(x_vals, y_vals, label=str(func))
        
        # Shade area if specified
        if shade == "above":
            plt.fill_between(x_vals, y_vals, np.max(y_vals), color='gray', alpha=0.5)
        elif shade == "below":
            plt.fill_between(x_vals, y_vals, np.min(y_vals), color='gray', alpha=0.5)
    
    plt.xlabel('x')
    plt.ylabel('y')
    plt.legend()
    plt.grid(True)
    plt.title('Graph of functions')
    plt.show()

# Create and print a table of (x, y) values
def create_table(func, x_range=(-10, 10), num_points=10):
    x_vals = np.linspace(x_range[0], x_range[1], num_points)
    table = [(x, func(x)) for x in x_vals]
    print("x\t\ty")
    for x, y in table:
        print(f"{x:.2f}\t\t{y:.2f}")

# Solve and graph a system of equations
def solve_and_graph_system(equations, x_range=(-10, 10)):
    x, y = symbols('x y')
    solutions = solve(equations, (x, y))
    print(f"Solutions: {solutions}")

    # Plot the system
    x_vals = np.linspace(x_range[0], x_range[1], 1000)
    plt.figure(figsize=(8, 6))
    
    for eq in equations:
        y_vals = [solve(eq.subs(x, x_val), y)[0] for x_val in x_vals]
        plt.plot(x_vals, y_vals, label=str(eq))
    
    plt.xlabel('x')
    plt.ylabel('y')
    plt.legend()
    plt.grid(True)
    plt.title('System of Equations')
    plt.show()

# Solve quadratic equations
def solve_quadratic(a, b, c):
    x = symbols('x')
    equation = Eq(a*x**2 + b*x + c, 0)
    solutions = solve(equation, x)
    print(f"Solutions: {solutions}")
    return solutions

# Example usage
def main():
    # Example functions
    def func1(x): return x**2
    def func2(x): return x**3
    
    # Graphing functions
    plot_functions([func1, func2])
    
    # Creating a table of values for func1
    create_table(func1)

    # Solving and graphing a system of equations
    x, y = symbols('x y')
    eq1 = Eq(x + y, 1)
    eq2 = Eq(x - y, 2)
    solve_and_graph_system([eq1, eq2])
    
    # Solving a quadratic equation
    solve_quadratic(1, -3, 2)

if __name__ == "__main__":
    main()
